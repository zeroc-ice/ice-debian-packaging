 //**********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

apply plugin: 'java'
apply from: "$rootProject.projectDir/../java/gradle/ice.gradle"

ext.testDir = "$rootProject.projectDir/../java/test/src/main/java/test"
apply from: "$rootProject.projectDir/../java/test/slice.gradle"
apply from: "$rootProject.projectDir/gradle/tests.gradle"
apply from: "$rootProject.projectDir/gradle/dex.gradle"

sourceCompatibility = iceSourceCompatibility
targetCompatibility = iceTargetCompatibility

sourceSets {
    main {
        java {
            srcDir "$rootProject.projectDir/../java/test/src/main/java"
            include 'test/Util/**'
            exclude 'test/Ice/**/lambda'
        }
    }
}

idea.module {
    excludeDirs -= file(buildDir)
    buildDir.listFiles({d, f ->f != 'generated-src'} as FilenameFilter).each { excludeDirs += it }
}

dependencies {
    compile localDependency('ice')
}

tests.each {

    def name = it
    def dirName = name.replace('_', '/')
    project(":test_Ice_${name}") {
        apply plugin: 'java'
        apply from: "$rootProject.projectDir/../java/gradle/ice.gradle"

        sourceCompatibility = iceSourceCompatibility
        targetCompatibility = iceTargetCompatibility

        sourceSets {
            main {
                java {
                    srcDir "$rootProject.projectDir/../java/test/src/main/java"
                    include "test/Ice/${dirName}/**"
                    exclude 'test/Ice/**/lambda'
                    srcDir "$rootProject.projectDir/test/build/generated-src/"
                    include "test/Ice/${dirName}/**"                
                }
            }
        }

        def dexName = "IceTest_${name}.dex"
        task dexClasses {
            inputs.dir "${buildDir}/classes/main"
            outputs.file "${buildDir}/classes/main/${dexName}"
            doLast {
                exec {
                    commandLine "${dxCmd}", '--dex',
                            "--output=${buildDir}/classes/main/${dexName}",
                            "${buildDir}/classes/main"
                }
            }
        }

        dexClasses.dependsOn('classes')

        configure(jar) {
            include "${dexName}"
        }
        jar.dependsOn(dexClasses)

        dependencies {
            compile project(':test')
            compile localDependency('ice')
        }
    }
}
