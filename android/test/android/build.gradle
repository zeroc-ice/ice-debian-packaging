// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

apply plugin: 'com.android.application'
apply from: "$rootProject.projectDir/../java/gradle/ice.gradle"
apply from: "$rootProject.projectDir/gradle/tests.gradle"

android {
    compileSdkVersion ice_compileSdkVersion.toInteger()
    buildToolsVersion ice_buildToolsVersion

    defaultConfig {
        applicationId "com.zeroc.test"
        minSdkVersion ice_minSdkVersion.toInteger()
        targetSdkVersion ice_targetSdkVersion.toInteger()
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_6
            targetCompatibility JavaVersion.VERSION_1_6
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
        }
    }
}

// Copy the IceTestPlugins.dex file into the android test assets
// directory.
//
// I don't like this approach very much. It would be preferable for
// the test app to extract the dex file from the jar file but I can't
// figure out how to do that.
task copyTask(type: Copy) {
    from "${rootProject.projectDir}/test/plugins/build/classes/main/IceTestPlugins.dex"
    into "src/main/assets"
}
preBuild.dependsOn(copyTask)
copyTask.dependsOn(':testPlugins:dexClasses')

clean {
    delete("src/main/assets/IceTestPlugins.dex")
}

idea.module {
    excludeDirs -= file(buildDir)
    buildDir.listFiles({d, f ->f != 'generated-src'} as FilenameFilter).each { excludeDirs += it }
}

tests.each {
    def name = it
    def taskName = "copyTask-${name}"
    def testName = ":test_Ice_${name}"
    def dexName = "IceTest_${name}.dex"
    task "${taskName}"(type: Copy, dependsOn: "${testName}:dexClasses") {
        from "${rootProject.projectDir}/test/src/test_Ice_${name}/build/classes/main/${dexName}"
        into "src/main/assets"
    }
    preBuild.dependsOn(tasks[taskName])

    clean {
        delete("src/main/assets/${dexName}")
    }
}

task copyBksTask(type: Copy) {
    from "${rootProject.projectDir}/../certs/client.bks"
    from "${rootProject.projectDir}/../certs/server.bks"
    into "src/main/res/raw"
}
preBuild.dependsOn(copyBksTask)

clean {
    delete("src/main/res/raw/client.bks")
    delete("src/main/res/raw/server.bks")
}

dependencies {
    compile localDependency('ice')
    compile project(':test')
    compile project(':testPlugins')
}
