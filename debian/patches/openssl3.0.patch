--- a/cpp/src/Ice/SHA1.cpp
+++ b/cpp/src/Ice/SHA1.cpp
@@ -12,6 +12,8 @@
 #      include <CommonCrypto/CommonDigest.h>
 #   else
 #      include <openssl/sha.h>
+#      // Ignore OpenSSL 3.0 deprecation warning
+#      pragma GCC diagnostic ignored "-Wdeprecated-declarations"
 #   endif
 #endif
 
--- a/cpp/src/IceSSL/OpenSSLEngine.cpp
+++ b/cpp/src/IceSSL/OpenSSLEngine.cpp
@@ -28,6 +28,9 @@
 
 #ifdef _MSC_VER
 #   pragma warning(disable:4127) // conditional expression is constant
+#elif defined(__GNUC__)
+#  // Ignore OpenSSL 3.0 deprecation warning
+#  pragma GCC diagnostic ignored "-Wdeprecated-declarations"
 #endif
 
 using namespace std;
@@ -816,7 +819,7 @@
                             if(!_dhParams->add(keyLength, file))
                             {
                                 throw PluginInitializationException(__FILE__, __LINE__,
-                                                                "IceSSL: unable to read DH parameter file " + file);
+                                                                    "IceSSL: unable to read DH parameter file " + file);
                             }
                         }
                     }
@@ -824,6 +827,62 @@
                 }
             }
 
+            int revocationCheck = getRevocationCheck();
+            if(revocationCheck > 0)
+            {
+                vector<string> crlFiles =
+                    properties->getPropertyAsList(propPrefix + "CertificateRevocationListFiles");
+                if(crlFiles.empty())
+                {
+                    throw PluginInitializationException(
+                        __FILE__,
+                        __LINE__,
+                        "IceSSL: cannot enable revocation checks without setting certificate revocation list files");
+                }
+
+                X509_STORE* store = SSL_CTX_get_cert_store(_ctx);
+                if(!store)
+                {
+                    throw PluginInitializationException(
+                        __FILE__,
+                        __LINE__,
+                        "IceSSL: unable to obtain the certificate store");
+                }
+
+                X509_LOOKUP* lookup = X509_STORE_add_lookup(store, X509_LOOKUP_file());
+                if(!lookup)
+                {
+                    throw PluginInitializationException(__FILE__, __LINE__, "IceSSL: add lookup failed");
+                }
+
+                for(vector<string>::const_iterator it = crlFiles.begin(); it != crlFiles.end(); it++)
+                {
+                    string file;
+                    if(!checkPath(*it, defaultDir, false, file))
+                    {
+                        throw PluginInitializationException(
+                            __FILE__,
+                            __LINE__,
+                            "IceSSL: CRL file not found `" + *it + "'");
+                    }
+
+                    if(X509_LOOKUP_load_file(lookup, file.c_str(), X509_FILETYPE_PEM) == 0)
+                    {
+                        throw PluginInitializationException(
+                            __FILE__,
+                            __LINE__,
+                            "IceSSL: CRL load failure `" + *it + "'");
+                    }
+                }
+
+                unsigned long flags = X509_V_FLAG_CRL_CHECK;
+                if(revocationCheck > 1)
+                {
+                    flags |= X509_V_FLAG_CRL_CHECK_ALL;
+                }
+                X509_STORE_set_flags(store, flags);
+            }
+
             SSL_CTX_set_mode(_ctx, SSL_MODE_ENABLE_PARTIAL_WRITE);
         }
 
--- a/cpp/src/IceSSL/OpenSSLUtil.cpp
+++ b/cpp/src/IceSSL/OpenSSLUtil.cpp
@@ -10,6 +10,8 @@
 //
 #if defined(__GNUC__)
 #  pragma GCC diagnostic ignored "-Wold-style-cast"
+#  // Ignore OpenSSL 3.0 deprecation warning
+#  pragma GCC diagnostic ignored "-Wdeprecated-declarations"
 #endif
 
 using namespace std;
--- a/cpp/src/Ice/Thread.cpp
+++ b/cpp/src/Ice/Thread.cpp
@@ -714,9 +714,9 @@
     }
     if(stackSize > 0)
     {
-        if(stackSize < PTHREAD_STACK_MIN)
+        if(stackSize < (size_t)PTHREAD_STACK_MIN)
         {
-            stackSize = PTHREAD_STACK_MIN;
+            stackSize = (size_t)PTHREAD_STACK_MIN;
         }
 #ifdef __APPLE__
         if(stackSize % 4096 > 0)
